#!/bin/bash

# see https://leetcode.com/problems/word-frequency/

# Check if the input file exists
if [ ! -f "words.txt" ]; then
    echo "Error: words.txt not found.">&2
    exit 1
fi

cat words.txt | awk '{ for(i=1; i<=NF; i++) words[$i]++ } END { for(w in words) print w, words[w] }' | sort -k2 -n -r
# Этот код использует команду `awk` в комбинации с другими командами для анализа текстового файла `words.txt` и вывода слов в порядке убывания частоты их появления. Вот расширенное объяснение шаг за шагом:
# 1. `cat words.txt` - Эта часть команды отображает содержимое файла `words.txt`, выводя его на стандартный вывод.
# 2. `awk '{ for(i=1; i<=NF; i++) words[$i]++ } END { for(w in words) print w, words[w] }'` - Эта часть команды использует `awk` для обработки вывода от `cat`. Внутри фигурных скобок:
#    - `for(i=1; i<=NF; i++) words[$i]++` - Этот цикл проходит по каждому слову в строке и увеличивает счетчик этого слова в массиве `words`.
#    - `END { for(w in words) print w, words[w] }` - Этот блок выполнится после обработки всех строк. Он проходит через массив `words` и выводит каждое слово и его частоту.
# 3. `sort -k2 -n -r` - Эта часть команды отправляет вывод из предыдущего `awk` в команду `sort`, чтобы отсортировать слова по их частоте:
#    - `-k2` - Здесь мы указываем, что сортировка будет идти по второму столбцу, то есть по частоте.
#    - `-n` - Этот флаг говорит `sort`, что данные во втором столбце числовые.
#    - `-r` - Этот флаг обратного порядка сортировки, то есть от самой высокой частоты к наименьшей.
# Таким образом, весь этот код вместе сначала анализирует файл `words.txt`, подсчитывает частоту каждого слова с помощью `awk`, а затем сортирует вывод по убыванию частоты с помощью `sort`.